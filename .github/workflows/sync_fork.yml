name: Sync Upstream and Create PR

on:
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout Fork
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "minchodang"
          git config user.email "minsu910725@gmail.com"

      - name: Fetch Upstream
        run: |
          git remote add upstream https://github.com/kode-krew/meta-test-be.git
          git fetch upstream
          git fetch origin

      - name: Check for Changes
        id: changes
        run: |
          git diff --exit-code origin/main upstream/main -- . ':(exclude).github/workflows/sync-upstream.yml' || echo "changes=true" >> $GITHUB_OUTPUT
          if [ ! -f $GITHUB_OUTPUT ]; then
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Existing PRs
        id: existing-prs
        run: |
          EXISTING_PR=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls \
              | jq -r '.[] | select(.head.ref | startswith("sync-upstream-")) | .head.ref')

          # Ensure EXISTING_PR is not empty and doesn't contain problematic characters
          if [[ -n "$EXISTING_PR" && "$EXISTING_PR" =~ ^[a-zA-Z0-9._-]+$ ]]; then
              echo "existing_pr=true" >> $GITHUB_ENV
              echo "existing_pr_ref=$EXISTING_PR" >> $GITHUB_ENV
          else
              echo "existing_pr=false" >> $GITHUB_ENV
          fi

      - name: Compare Changes with Existing PR
        id: compare-changes
        if: steps.existing-prs.outputs.existing_pr == 'true' && steps.changes.outputs.changes == 'true'
        run: |
          git fetch origin ${{ steps.existing-prs.outputs.existing_pr_ref }}:existing-pr-branch
          git diff --exit-code origin/main existing-pr-branch -- . ':(exclude).github/workflows/sync-upstream.yml' || echo "diff=true" >> $GITHUB_OUTPUT
          if [ ! -f $GITHUB_OUTPUT ]; then
            echo "diff=false" >> $GITHUB_OUTPUT
          fi

      - name: Close Existing PR
        if: steps.compare-changes.outputs.diff == 'false'
        run: |
          PR_NUMBER=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            | jq -r '.[] | select(.head.ref=="${{ steps.existing-prs.outputs.existing_pr_ref }}") | .number')

          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER \
            -d '{"state":"closed"}'

      - name: Create Branch and Rebase Changes
        if: steps.compare-changes.outputs.diff == 'true' || steps.existing-prs.outputs.existing_pr == 'false'
        run: |
          BRANCH_NAME=sync-upstream-$(date +%Y%m%d%H%M%S)
          git checkout -b $BRANCH_NAME origin/main
          git rebase upstream/main
          git push origin $BRANCH_NAME --force-with-lease
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request
        if: steps.compare-changes.outputs.diff == 'true' || steps.existing-prs.outputs.existing_pr == 'false'
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
              "title": "Sync with upstream",
              "body": "This PR syncs the fork with upstream repository",
              "head": "'"${{ env.BRANCH_NAME }}"'",
              "base": "main"
            }'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
